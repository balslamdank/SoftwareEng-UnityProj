// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var magicItems = MagicItems.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MagicItems
    {
        [JsonProperty("Magic Items")]
        public MagicItemsClass MagicItemsMagicItems { get; set; }
    }

    public partial class MagicItemsClass
    {
        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("Adamantine Armor")]
        public PuneHedgehog AdamantineArmor { get; set; }

        [JsonProperty("Ammunition, +1, +2, or +3")]
        public PuneHedgehog Ammunition12Or3 { get; set; }

        [JsonProperty("Amulet of Health")]
        public PuneHedgehog AmuletOfHealth { get; set; }

        [JsonProperty("Amulet of Proof against Detection and Location")]
        public PuneHedgehog AmuletOfProofAgainstDetectionAndLocation { get; set; }

        [JsonProperty("Amulet of the Planes")]
        public PuneHedgehog AmuletOfThePlanes { get; set; }

        [JsonProperty("Animated Shield")]
        public PuneHedgehog AnimatedShield { get; set; }

        [JsonProperty("Apparatus of the Crab")]
        public PuneHedgehog ApparatusOfTheCrab { get; set; }

        [JsonProperty("Apparatus of the Crab Levers")]
        public ApparatusOfTheCrabLevers ApparatusOfTheCrabLevers { get; set; }

        [JsonProperty("Armor, +1, +2, or +3")]
        public PuneHedgehog Armor12Or3 { get; set; }

        [JsonProperty("Armor of Invulnerability")]
        public PuneHedgehog ArmorOfInvulnerability { get; set; }

        [JsonProperty("Armor of Resistance")]
        public OfResistance ArmorOfResistance { get; set; }

        [JsonProperty("Armor of Vulnerability")]
        public PuneHedgehog ArmorOfVulnerability { get; set; }

        [JsonProperty("Arrow-Catching Shield")]
        public PuneHedgehog ArrowCatchingShield { get; set; }

        [JsonProperty("Arrow of Slaying")]
        public PuneHedgehog ArrowOfSlaying { get; set; }

        [JsonProperty("Bag of Beans")]
        public BagOfBeans BagOfBeans { get; set; }

        [JsonProperty("Bag of Devouring")]
        public PuneHedgehog BagOfDevouring { get; set; }

        [JsonProperty("Bag of Holding")]
        public PuneHedgehog BagOfHolding { get; set; }

        [JsonProperty("Bag of Tricks")]
        public BagOfTricks BagOfTricks { get; set; }

        [JsonProperty("Bead of Force")]
        public PuneHedgehog BeadOfForce { get; set; }

        [JsonProperty("Belt of Dwarvenkind")]
        public BeltOfDwarvenkind BeltOfDwarvenkind { get; set; }

        [JsonProperty("Belt of Giant Strength")]
        public BeltOfGiantStrength BeltOfGiantStrength { get; set; }

        [JsonProperty("Berserker Axe")]
        public PuneHedgehog BerserkerAxe { get; set; }

        [JsonProperty("Boots of Elvenkind")]
        public PuneHedgehog BootsOfElvenkind { get; set; }

        [JsonProperty("Boots of Levitation")]
        public PuneHedgehog BootsOfLevitation { get; set; }

        [JsonProperty("Boots of Speed")]
        public PuneHedgehog BootsOfSpeed { get; set; }

        [JsonProperty("Boots of Striding and Springing")]
        public PuneHedgehog BootsOfStridingAndSpringing { get; set; }

        [JsonProperty("Boots of the Winterlands")]
        public BeltOfDwarvenkind BootsOfTheWinterlands { get; set; }

        [JsonProperty("Bowl of Commanding Water Elementals")]
        public PuneHedgehog BowlOfCommandingWaterElementals { get; set; }

        [JsonProperty("Bracers of Archery")]
        public PuneHedgehog BracersOfArchery { get; set; }

        [JsonProperty("Bracers of Defense")]
        public PuneHedgehog BracersOfDefense { get; set; }

        [JsonProperty("Brazier of Commanding Fire Elementals")]
        public PuneHedgehog BrazierOfCommandingFireElementals { get; set; }

        [JsonProperty("Brooch of Shielding")]
        public PuneHedgehog BroochOfShielding { get; set; }

        [JsonProperty("Broom of Flying")]
        public PuneHedgehog BroomOfFlying { get; set; }

        [JsonProperty("Candle of Invocation")]
        public CandleOfInvocation CandleOfInvocation { get; set; }

        [JsonProperty("Cape of the Mountebank")]
        public PuneHedgehog CapeOfTheMountebank { get; set; }

        [JsonProperty("Carpet of Flying")]
        public CarpetOfFlying CarpetOfFlying { get; set; }

        [JsonProperty("Censer of Controlling Air Elementals")]
        public PuneHedgehog CenserOfControllingAirElementals { get; set; }

        [JsonProperty("Chime of Opening")]
        public PuneHedgehog ChimeOfOpening { get; set; }

        [JsonProperty("Circlet of Blasting")]
        public PuneHedgehog CircletOfBlasting { get; set; }

        [JsonProperty("Cloak of Arachnida")]
        public BeltOfDwarvenkind CloakOfArachnida { get; set; }

        [JsonProperty("Cloak of Displacement")]
        public PuneHedgehog CloakOfDisplacement { get; set; }

        [JsonProperty("Cloak of Elvenkind")]
        public PuneHedgehog CloakOfElvenkind { get; set; }

        [JsonProperty("Cloak of Protection")]
        public PuneHedgehog CloakOfProtection { get; set; }

        [JsonProperty("Cloak of the Bat")]
        public PuneHedgehog CloakOfTheBat { get; set; }

        [JsonProperty("Cloak of the Manta Ray")]
        public PuneHedgehog CloakOfTheMantaRay { get; set; }

        [JsonProperty("Crystal Ball")]
        public PuneHedgehog CrystalBall { get; set; }

        [JsonProperty("Cube of Force")]
        public PuneHedgehog CubeOfForce { get; set; }

        [JsonProperty("Cube of Force Faces")]
        public CubeOfForceFaces CubeOfForceFaces { get; set; }

        [JsonProperty("Cubic Gate")]
        public PuneHedgehog CubicGate { get; set; }

        [JsonProperty("Dagger of Venom")]
        public PuneHedgehog DaggerOfVenom { get; set; }

        [JsonProperty("Dancing Sword")]
        public PuneHedgehog DancingSword { get; set; }

        [JsonProperty("Decanter of Endless Water")]
        public BeltOfDwarvenkind DecanterOfEndlessWater { get; set; }

        [JsonProperty("Deck of Illusions")]
        public DeckOfIllusions DeckOfIllusions { get; set; }

        [JsonProperty("Deck of Many Things")]
        public DeckOfManyThings DeckOfManyThings { get; set; }

        [JsonProperty("Defender")]
        public PuneHedgehog Defender { get; set; }

        [JsonProperty("Demon Armor")]
        public PuneHedgehog DemonArmor { get; set; }

        [JsonProperty("Dimensional Shackles")]
        public PuneHedgehog DimensionalShackles { get; set; }

        [JsonProperty("Dragon Scale Mail")]
        public DragonScaleMail DragonScaleMail { get; set; }

        [JsonProperty("Dragon Slayer")]
        public PuneHedgehog DragonSlayer { get; set; }

        [JsonProperty("Dust of Disappearance")]
        public PuneHedgehog DustOfDisappearance { get; set; }

        [JsonProperty("Dust of Dryness")]
        public PuneHedgehog DustOfDryness { get; set; }

        [JsonProperty("Dust of Sneezing and Choking")]
        public PuneHedgehog DustOfSneezingAndChoking { get; set; }

        [JsonProperty("Dwarven Plate")]
        public PuneHedgehog DwarvenPlate { get; set; }

        [JsonProperty("Dwarven Thrower")]
        public PuneHedgehog DwarvenThrower { get; set; }

        [JsonProperty("Efficient Quiver")]
        public PuneHedgehog EfficientQuiver { get; set; }

        [JsonProperty("Efreeti Bottle")]
        public BagOfBeans EfreetiBottle { get; set; }

        [JsonProperty("Elemental Gem")]
        public ElementalGem ElementalGem { get; set; }

        [JsonProperty("Elven Chain")]
        public PuneHedgehog ElvenChain { get; set; }

        [JsonProperty("Eversmoking Bottle")]
        public PuneHedgehog EversmokingBottle { get; set; }

        [JsonProperty("Eyes of Charming")]
        public PuneHedgehog EyesOfCharming { get; set; }

        [JsonProperty("Eyes of Minute Seeing")]
        public PuneHedgehog EyesOfMinuteSeeing { get; set; }

        [JsonProperty("Eyes of the Eagle")]
        public PuneHedgehog EyesOfTheEagle { get; set; }

        [JsonProperty("Feather Token")]
        public FeatherToken FeatherToken { get; set; }

        [JsonProperty("Figurine of Wondrous Power")]
        public FigurineOfWondrousPower FigurineOfWondrousPower { get; set; }

        [JsonProperty("Flame Tongue")]
        public PuneHedgehog FlameTongue { get; set; }

        [JsonProperty("Folding Boat")]
        public PuneHedgehog FoldingBoat { get; set; }

        [JsonProperty("Frost Brand")]
        public PuneHedgehog FrostBrand { get; set; }

        [JsonProperty("Gauntlets of Ogre Power")]
        public PuneHedgehog GauntletsOfOgrePower { get; set; }

        [JsonProperty("Gem of Brightness")]
        public BeltOfDwarvenkind GemOfBrightness { get; set; }

        [JsonProperty("Gem of Seeing")]
        public PuneHedgehog GemOfSeeing { get; set; }

        [JsonProperty("Giant Slayer")]
        public PuneHedgehog GiantSlayer { get; set; }

        [JsonProperty("Glamoured Studded Leather")]
        public PuneHedgehog GlamouredStuddedLeather { get; set; }

        [JsonProperty("Gloves of Missile Snaring")]
        public PuneHedgehog GlovesOfMissileSnaring { get; set; }

        [JsonProperty("Gloves of Swimming and Climbing")]
        public PuneHedgehog GlovesOfSwimmingAndClimbing { get; set; }

        [JsonProperty("Goggles of Night")]
        public PuneHedgehog GogglesOfNight { get; set; }

        [JsonProperty("Hammer of Thunderbolts")]
        public PuneHedgehog HammerOfThunderbolts { get; set; }

        [JsonProperty("Handy Haversack")]
        public PuneHedgehog HandyHaversack { get; set; }

        [JsonProperty("Hat of Disguise")]
        public PuneHedgehog HatOfDisguise { get; set; }

        [JsonProperty("Headband of Intellect")]
        public PuneHedgehog HeadbandOfIntellect { get; set; }

        [JsonProperty("Helm of Brilliance")]
        public BeltOfDwarvenkind HelmOfBrilliance { get; set; }

        [JsonProperty("Helm of Comprehending Languages")]
        public PuneHedgehog HelmOfComprehendingLanguages { get; set; }

        [JsonProperty("Helm of Telepathy")]
        public PuneHedgehog HelmOfTelepathy { get; set; }

        [JsonProperty("Helm of Teleportation")]
        public PuneHedgehog HelmOfTeleportation { get; set; }

        [JsonProperty("Holy Avenger")]
        public PuneHedgehog HolyAvenger { get; set; }

        [JsonProperty("Horn of Blasting")]
        public PuneHedgehog HornOfBlasting { get; set; }

        [JsonProperty("Horn of Valhalla")]
        public HornOfValhalla HornOfValhalla { get; set; }

        [JsonProperty("Horseshoes of a Zephyr")]
        public PuneHedgehog HorseshoesOfAZephyr { get; set; }

        [JsonProperty("Horseshoes of Speed")]
        public PuneHedgehog HorseshoesOfSpeed { get; set; }

        [JsonProperty("Immovable Rod")]
        public PuneHedgehog ImmovableRod { get; set; }

        [JsonProperty("Instant Fortress")]
        public PuneHedgehog InstantFortress { get; set; }

        [JsonProperty("Ioun Stone")]
        public PuneHedgehog IounStone { get; set; }

        [JsonProperty("Iron Bands of Binding")]
        public PuneHedgehog IronBandsOfBinding { get; set; }

        [JsonProperty("Iron Flask")]
        public IronFlask IronFlask { get; set; }

        [JsonProperty("Javelin of Lightning")]
        public PuneHedgehog JavelinOfLightning { get; set; }

        [JsonProperty("Lantern of Revealing")]
        public PuneHedgehog LanternOfRevealing { get; set; }

        [JsonProperty("Luck Blade")]
        public PuneHedgehog LuckBlade { get; set; }

        [JsonProperty("Mace of Disruption")]
        public PuneHedgehog MaceOfDisruption { get; set; }

        [JsonProperty("Mace of Smiting")]
        public PuneHedgehog MaceOfSmiting { get; set; }

        [JsonProperty("Mace of Terror")]
        public PuneHedgehog MaceOfTerror { get; set; }

        [JsonProperty("Mantle of Spell Resistance")]
        public PuneHedgehog MantleOfSpellResistance { get; set; }

        [JsonProperty("Manual of Bodily Health")]
        public PuneHedgehog ManualOfBodilyHealth { get; set; }

        [JsonProperty("Manual of Gainful Exercise")]
        public PuneHedgehog ManualOfGainfulExercise { get; set; }

        [JsonProperty("Manual of Golems")]
        public ManualOfGolems ManualOfGolems { get; set; }

        [JsonProperty("Manual of Quickness of Action")]
        public PuneHedgehog ManualOfQuicknessOfAction { get; set; }

        [JsonProperty("Marvelous Pigments")]
        public PuneHedgehog MarvelousPigments { get; set; }

        [JsonProperty("Medallion of Thoughts")]
        public PuneHedgehog MedallionOfThoughts { get; set; }

        [JsonProperty("Mirror of Life Trapping")]
        public PuneHedgehog MirrorOfLifeTrapping { get; set; }

        [JsonProperty("Mithral Armor")]
        public PuneHedgehog MithralArmor { get; set; }

        [JsonProperty("Necklace of Adaptation")]
        public PuneHedgehog NecklaceOfAdaptation { get; set; }

        [JsonProperty("Necklace of Fireballs")]
        public PuneHedgehog NecklaceOfFireballs { get; set; }

        [JsonProperty("Necklace of Prayer Beads")]
        public NecklaceOfPrayerBeads NecklaceOfPrayerBeads { get; set; }

        [JsonProperty("Nine Lives Stealer")]
        public PuneHedgehog NineLivesStealer { get; set; }

        [JsonProperty("Oathbow")]
        public PuneHedgehog Oathbow { get; set; }

        [JsonProperty("Oil of Etherealness")]
        public PuneHedgehog OilOfEtherealness { get; set; }

        [JsonProperty("Oil of Sharpness")]
        public PuneHedgehog OilOfSharpness { get; set; }

        [JsonProperty("Oil of Slipperiness")]
        public PuneHedgehog OilOfSlipperiness { get; set; }

        [JsonProperty("Pearl of Power")]
        public PuneHedgehog PearlOfPower { get; set; }

        [JsonProperty("Periapt of Health")]
        public PuneHedgehog PeriaptOfHealth { get; set; }

        [JsonProperty("Periapt of Proof against Poison")]
        public PuneHedgehog PeriaptOfProofAgainstPoison { get; set; }

        [JsonProperty("Periapt of Wound Closure")]
        public PuneHedgehog PeriaptOfWoundClosure { get; set; }

        [JsonProperty("Philter of Love")]
        public PuneHedgehog PhilterOfLove { get; set; }

        [JsonProperty("Pipes of Haunting")]
        public PuneHedgehog PipesOfHaunting { get; set; }

        [JsonProperty("Pipes of the Sewers")]
        public PuneHedgehog PipesOfTheSewers { get; set; }

        [JsonProperty("Plate Armor of Etherealness")]
        public PuneHedgehog PlateArmorOfEtherealness { get; set; }

        [JsonProperty("Portable Hole")]
        public PuneHedgehog PortableHole { get; set; }

        [JsonProperty("Potion of Animal Friendship")]
        public PuneHedgehog PotionOfAnimalFriendship { get; set; }

        [JsonProperty("Potion of Clairvoyance")]
        public PuneHedgehog PotionOfClairvoyance { get; set; }

        [JsonProperty("Potion of Climbing")]
        public PuneHedgehog PotionOfClimbing { get; set; }

        [JsonProperty("Potion of Diminution")]
        public PuneHedgehog PotionOfDiminution { get; set; }

        [JsonProperty("Potion of Flying")]
        public PuneHedgehog PotionOfFlying { get; set; }

        [JsonProperty("Potion of Gaseous Form")]
        public PuneHedgehog PotionOfGaseousForm { get; set; }

        [JsonProperty("Potion of Giant Strength")]
        public PotionOfGiantStrength PotionOfGiantStrength { get; set; }

        [JsonProperty("Potion of Growth")]
        public PuneHedgehog PotionOfGrowth { get; set; }

        [JsonProperty("Potion of Healing")]
        public PotionOfHealing PotionOfHealing { get; set; }

        [JsonProperty("Potion of Heroism")]
        public PuneHedgehog PotionOfHeroism { get; set; }

        [JsonProperty("Potion of Invisibility")]
        public PuneHedgehog PotionOfInvisibility { get; set; }

        [JsonProperty("Potion of Mind Reading")]
        public PuneHedgehog PotionOfMindReading { get; set; }

        [JsonProperty("Potion of Poison")]
        public PuneHedgehog PotionOfPoison { get; set; }

        [JsonProperty("Potion of Resistance")]
        public OfResistance PotionOfResistance { get; set; }

        [JsonProperty("Potion of Speed")]
        public PuneHedgehog PotionOfSpeed { get; set; }

        [JsonProperty("Potion of Water Breathing")]
        public PuneHedgehog PotionOfWaterBreathing { get; set; }

        [JsonProperty("Restorative Ointment")]
        public PuneHedgehog RestorativeOintment { get; set; }

        [JsonProperty("Ring of Animal Influence")]
        public BeltOfDwarvenkind RingOfAnimalInfluence { get; set; }

        [JsonProperty("Ring of Djinni Summoning")]
        public PuneHedgehog RingOfDjinniSummoning { get; set; }

        [JsonProperty("Ring of Elemental Command")]
        public BeltOfDwarvenkind RingOfElementalCommand { get; set; }

        [JsonProperty("Ring of Evasion")]
        public PuneHedgehog RingOfEvasion { get; set; }

        [JsonProperty("Ring of Feather Falling")]
        public PuneHedgehog RingOfFeatherFalling { get; set; }

        [JsonProperty("Ring of Free Action")]
        public PuneHedgehog RingOfFreeAction { get; set; }

        [JsonProperty("Ring of Invisibility")]
        public PuneHedgehog RingOfInvisibility { get; set; }

        [JsonProperty("Ring of Jumping")]
        public PuneHedgehog RingOfJumping { get; set; }

        [JsonProperty("Ring of Mind Shielding")]
        public PuneHedgehog RingOfMindShielding { get; set; }

        [JsonProperty("Ring of Protection")]
        public PuneHedgehog RingOfProtection { get; set; }

        [JsonProperty("Ring of Regeneration")]
        public PuneHedgehog RingOfRegeneration { get; set; }

        [JsonProperty("Ring of Resistance")]
        public RingOfResistance RingOfResistance { get; set; }

        [JsonProperty("Ring of Shooting Stars")]
        public RingOfShootingStars RingOfShootingStars { get; set; }

        [JsonProperty("Ring of Spell Storing")]
        public PuneHedgehog RingOfSpellStoring { get; set; }

        [JsonProperty("Ring of Spell Turning")]
        public PuneHedgehog RingOfSpellTurning { get; set; }

        [JsonProperty("Ring of Swimming")]
        public PuneHedgehog RingOfSwimming { get; set; }

        [JsonProperty("Ring of Telekinesis")]
        public PuneHedgehog RingOfTelekinesis { get; set; }

        [JsonProperty("Ring of the Ram")]
        public PuneHedgehog RingOfTheRam { get; set; }

        [JsonProperty("Ring of Three Wishes")]
        public PuneHedgehog RingOfThreeWishes { get; set; }

        [JsonProperty("Ring of Warmth")]
        public PuneHedgehog RingOfWarmth { get; set; }

        [JsonProperty("Ring of Water Walking")]
        public PuneHedgehog RingOfWaterWalking { get; set; }

        [JsonProperty("Ring of X-ray Vision")]
        public PuneHedgehog RingOfXRayVision { get; set; }

        [JsonProperty("Robe of Eyes")]
        public BeltOfDwarvenkind RobeOfEyes { get; set; }

        [JsonProperty("Robe of Scintillating Colors")]
        public PuneHedgehog RobeOfScintillatingColors { get; set; }

        [JsonProperty("Robe of Stars")]
        public PuneHedgehog RobeOfStars { get; set; }

        [JsonProperty("Robe of the Archmagi")]
        public BeltOfDwarvenkind RobeOfTheArchmagi { get; set; }

        [JsonProperty("Robe of Useful Items")]
        public RobeOfUsefulItems RobeOfUsefulItems { get; set; }

        [JsonProperty("Rod of Absorption")]
        public PuneHedgehog RodOfAbsorption { get; set; }

        [JsonProperty("Rod of Alertness")]
        public PuneHedgehog RodOfAlertness { get; set; }

        [JsonProperty("Rod of Lordly Might")]
        public PuneHedgehog RodOfLordlyMight { get; set; }

        [JsonProperty("Rod of Rulership")]
        public PuneHedgehog RodOfRulership { get; set; }

        [JsonProperty("Rod of Security")]
        public PuneHedgehog RodOfSecurity { get; set; }

        [JsonProperty("Rope of Climbing")]
        public PuneHedgehog RopeOfClimbing { get; set; }

        [JsonProperty("Rope of Entanglement")]
        public PuneHedgehog RopeOfEntanglement { get; set; }

        [JsonProperty("Scarab of Protection")]
        public BeltOfDwarvenkind ScarabOfProtection { get; set; }

        [JsonProperty("Scimitar of Speed")]
        public PuneHedgehog ScimitarOfSpeed { get; set; }

        [JsonProperty("Shield, +1, +2, or +3")]
        public PuneHedgehog Shield12Or3 { get; set; }

        [JsonProperty("Shield of Missile Attraction")]
        public PuneHedgehog ShieldOfMissileAttraction { get; set; }

        [JsonProperty("Slippers of Spider Climbing")]
        public PuneHedgehog SlippersOfSpiderClimbing { get; set; }

        [JsonProperty("Sovereign Glue")]
        public PuneHedgehog SovereignGlue { get; set; }

        [JsonProperty("Spell Scroll")]
        public MagicItemsSpellScroll SpellScroll { get; set; }

        [JsonProperty("Spellguard Shield")]
        public PuneHedgehog SpellguardShield { get; set; }

        [JsonProperty("Sphere of Annihilation")]
        public SphereOfAnnihilation SphereOfAnnihilation { get; set; }

        [JsonProperty("Staff of Charming")]
        public PuneHedgehog StaffOfCharming { get; set; }

        [JsonProperty("Staff of Fire")]
        public PuneHedgehog StaffOfFire { get; set; }

        [JsonProperty("Staff of Frost")]
        public PuneHedgehog StaffOfFrost { get; set; }

        [JsonProperty("Staff of Healing")]
        public PuneHedgehog StaffOfHealing { get; set; }

        [JsonProperty("Staff of Power")]
        public StaffOf StaffOfPower { get; set; }

        [JsonProperty("Staff of Striking")]
        public PuneHedgehog StaffOfStriking { get; set; }

        [JsonProperty("Staff of Swarming Insects")]
        public PuneHedgehog StaffOfSwarmingInsects { get; set; }

        [JsonProperty("Staff of the Magi")]
        public StaffOf StaffOfTheMagi { get; set; }

        [JsonProperty("Staff of the Python")]
        public PuneHedgehog StaffOfThePython { get; set; }

        [JsonProperty("Staff of the Woodlands")]
        public PuneHedgehog StaffOfTheWoodlands { get; set; }

        [JsonProperty("Staff of Thunder and Lightning")]
        public PuneHedgehog StaffOfThunderAndLightning { get; set; }

        [JsonProperty("Staff of Withering")]
        public PuneHedgehog StaffOfWithering { get; set; }

        [JsonProperty("Stone of Controlling Earth Elementals")]
        public PuneHedgehog StoneOfControllingEarthElementals { get; set; }

        [JsonProperty("Stone of Good Luck (Luckstone)")]
        public PuneHedgehog StoneOfGoodLuckLuckstone { get; set; }

        [JsonProperty("Sun Blade")]
        public PuneHedgehog SunBlade { get; set; }

        [JsonProperty("Sword of Life Stealing")]
        public PuneHedgehog SwordOfLifeStealing { get; set; }

        [JsonProperty("Sword of Sharpness")]
        public PuneHedgehog SwordOfSharpness { get; set; }

        [JsonProperty("Sword of Wounding")]
        public PuneHedgehog SwordOfWounding { get; set; }

        [JsonProperty("Talisman of Pure Good")]
        public PuneHedgehog TalismanOfPureGood { get; set; }

        [JsonProperty("Talisman of the Sphere")]
        public PuneHedgehog TalismanOfTheSphere { get; set; }

        [JsonProperty("Talisman of Ultimate Evil")]
        public PuneHedgehog TalismanOfUltimateEvil { get; set; }

        [JsonProperty("Tome of Clear Thought")]
        public PuneHedgehog TomeOfClearThought { get; set; }

        [JsonProperty("Tome of Leadership and Influence")]
        public PuneHedgehog TomeOfLeadershipAndInfluence { get; set; }

        [JsonProperty("Tome of Understanding")]
        public PuneHedgehog TomeOfUnderstanding { get; set; }

        [JsonProperty("Trident of Fish Command")]
        public PuneHedgehog TridentOfFishCommand { get; set; }

        [JsonProperty("Universal Solvent")]
        public PuneHedgehog UniversalSolvent { get; set; }

        [JsonProperty("Vicious Weapon")]
        public PuneHedgehog ViciousWeapon { get; set; }

        [JsonProperty("Vorpal Sword")]
        public PuneHedgehog VorpalSword { get; set; }

        [JsonProperty("Wand of Binding")]
        public PuneHedgehog WandOfBinding { get; set; }

        [JsonProperty("Wand of Enemy Detection")]
        public PuneHedgehog WandOfEnemyDetection { get; set; }

        [JsonProperty("Wand of Fear")]
        public PuneHedgehog WandOfFear { get; set; }

        [JsonProperty("Wand of Fireballs")]
        public PuneHedgehog WandOfFireballs { get; set; }

        [JsonProperty("Wand of Lightning Bolts")]
        public PuneHedgehog WandOfLightningBolts { get; set; }

        [JsonProperty("Wand of Magic Detection")]
        public PuneHedgehog WandOfMagicDetection { get; set; }

        [JsonProperty("Wand of Magic Missiles")]
        public PuneHedgehog WandOfMagicMissiles { get; set; }

        [JsonProperty("Wand of Paralysis")]
        public PuneHedgehog WandOfParalysis { get; set; }

        [JsonProperty("Wand of Polymorph")]
        public PuneHedgehog WandOfPolymorph { get; set; }

        [JsonProperty("Wand of Secrets")]
        public PuneHedgehog WandOfSecrets { get; set; }

        [JsonProperty("Wand of the War Mage, +1, +2, or +3")]
        public PuneHedgehog WandOfTheWarMage12Or3 { get; set; }

        [JsonProperty("Wand of Web")]
        public PuneHedgehog WandOfWeb { get; set; }

        [JsonProperty("Wand of Wonder")]
        public BagOfBeans WandOfWonder { get; set; }

        [JsonProperty("Weapon, +1, +2, or +3")]
        public PuneHedgehog Weapon12Or3 { get; set; }

        [JsonProperty("Well of Many Worlds")]
        public PuneHedgehog WellOfManyWorlds { get; set; }

        [JsonProperty("Wind Fan")]
        public PuneHedgehog WindFan { get; set; }

        [JsonProperty("Winged Boots")]
        public PuneHedgehog WingedBoots { get; set; }

        [JsonProperty("Wings of Flying")]
        public PuneHedgehog WingsOfFlying { get; set; }

        [JsonProperty("Sentient Magic Items")]
        public SentientMagicItems SentientMagicItems { get; set; }

        [JsonProperty("Artifacts")]
        public Artifacts Artifacts { get; set; }
    }

    public partial class PuneHedgehog
    {
        [JsonProperty("content")]
        public List<string> Content { get; set; }
    }

    public partial class ApparatusOfTheCrabLevers
    {
        [JsonProperty("table")]
        public ApparatusOfTheCrabLeversTable Table { get; set; }
    }

    public partial class ApparatusOfTheCrabLeversTable
    {
        [JsonProperty("Lever")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Lever { get; set; }

        [JsonProperty("Up")]
        public List<string> Up { get; set; }

        [JsonProperty("Down")]
        public List<string> Down { get; set; }
    }

    public partial class OfResistance
    {
        [JsonProperty("content")]
        public List<ArmorOfResistanceContent> Content { get; set; }
    }

    public partial class PurpleContent
    {
        [JsonProperty("table")]
        public PurpleTable Table { get; set; }
    }

    public partial class PurpleTable
    {
        [JsonProperty("d10")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> D10 { get; set; }

        [JsonProperty("Damage Type")]
        public List<string> DamageType { get; set; }
    }

    public partial class Artifacts
    {
        [JsonProperty("Orb of Dragonkind")]
        public BeltOfDwarvenkind OrbOfDragonkind { get; set; }
    }

    public partial class BeltOfDwarvenkind
    {
        [JsonProperty("content")]
        public List<Content15> Content { get; set; }
    }

    public partial class BagOfBeans
    {
        [JsonProperty("content")]
        public List<BagOfBeansContent> Content { get; set; }
    }

    public partial class FluffyContent
    {
        [JsonProperty("table")]
        public FluffyTable Table { get; set; }
    }

    public partial class FluffyTable
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Effect")]
        public List<string> Effect { get; set; }
    }

    public partial class BagOfTricks
    {
        [JsonProperty("content")]
        public List<string> Content { get; set; }

        [JsonProperty("Gray Bag of Tricks")]
        public GrayBagOfTricksClass GrayBagOfTricks { get; set; }

        [JsonProperty("Rust Bag of Tricks")]
        public GrayBagOfTricksClass RustBagOfTricks { get; set; }

        [JsonProperty("Tan Bag of Tricks")]
        public GrayBagOfTricksClass TanBagOfTricks { get; set; }
    }

    public partial class GrayBagOfTricksClass
    {
        [JsonProperty("table")]
        public GrayBagOfTricksTable Table { get; set; }
    }

    public partial class GrayBagOfTricksTable
    {
        [JsonProperty("d8")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> D8 { get; set; }

        [JsonProperty("Creature")]
        public List<string> Creature { get; set; }
    }

    public partial class BeltOfGiantStrength
    {
        [JsonProperty("content")]
        public List<BeltOfGiantStrengthContent> Content { get; set; }
    }

    public partial class TentacledContent
    {
        [JsonProperty("table")]
        public TentacledTable Table { get; set; }
    }

    public partial class TentacledTable
    {
        [JsonProperty("Type")]
        public List<string> Type { get; set; }

        [JsonProperty("Strength")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Strength { get; set; }

        [JsonProperty("Rarity")]
        public List<string> Rarity { get; set; }
    }

    public partial class CandleOfInvocation
    {
        [JsonProperty("content")]
        public List<CandleOfInvocationContent> Content { get; set; }
    }

    public partial class StickyContent
    {
        [JsonProperty("table")]
        public StickyTable Table { get; set; }
    }

    public partial class StickyTable
    {
        [JsonProperty("d20")]
        public List<string> D20 { get; set; }

        [JsonProperty("Alignment")]
        public List<string> Alignment { get; set; }
    }

    public partial class CarpetOfFlying
    {
        [JsonProperty("content")]
        public List<CarpetOfFlyingContent> Content { get; set; }
    }

    public partial class IndigoContent
    {
        [JsonProperty("table")]
        public IndigoTable Table { get; set; }
    }

    public partial class IndigoTable
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Size")]
        public List<string> Size { get; set; }

        [JsonProperty("Capacity")]
        public List<string> Capacity { get; set; }

        [JsonProperty("Flying Speed")]
        public List<string> FlyingSpeed { get; set; }
    }

    public partial class CubeOfForceFaces
    {
        [JsonProperty("content")]
        public List<CubeOfForceFacesContent> Content { get; set; }
    }

    public partial class IndecentContent
    {
        [JsonProperty("table")]
        public IndecentTable Table { get; set; }
    }

    public partial class IndecentTable
    {
        [JsonProperty("Face", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Face { get; set; }

        [JsonProperty("Charges", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Charges { get; set; }

        [JsonProperty("Effect", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Effect { get; set; }

        [JsonProperty("Spell or Item", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SpellOrItem { get; set; }

        [JsonProperty("Charges Lost", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ChargesLost { get; set; }
    }

    public partial class DeckOfIllusions
    {
        [JsonProperty("content")]
        public List<DeckOfIllusionsContent> Content { get; set; }
    }

    public partial class HilariousContent
    {
        [JsonProperty("table")]
        public HilariousTable Table { get; set; }
    }

    public partial class HilariousTable
    {
        [JsonProperty("Playing Card")]
        public List<string> PlayingCard { get; set; }

        [JsonProperty("Illusion")]
        public List<string> Illusion { get; set; }
    }

    public partial class DeckOfManyThings
    {
        [JsonProperty("content")]
        public List<DeckOfManyThingsContent> Content { get; set; }

        [JsonProperty("Avatar of Death")]
        public AvatarOfDeath AvatarOfDeath { get; set; }
    }

    public partial class AvatarOfDeath
    {
        [JsonProperty("content")]
        public List<AvatarOfDeathContent> Content { get; set; }
    }

    public partial class AmbitiousContent
    {
        [JsonProperty("table")]
        public AmbitiousTable Table { get; set; }
    }

    public partial class AmbitiousTable
    {
        [JsonProperty("STR")]
        public List<string> Str { get; set; }

        [JsonProperty("DEX")]
        public List<string> Dex { get; set; }

        [JsonProperty("CON")]
        public List<string> Con { get; set; }

        [JsonProperty("INT")]
        public List<string> Int { get; set; }

        [JsonProperty("WIS")]
        public List<string> Wis { get; set; }

        [JsonProperty("CHA")]
        public List<string> Cha { get; set; }
    }

    public partial class CunningContent
    {
        [JsonProperty("table")]
        public CunningTable Table { get; set; }
    }

    public partial class CunningTable
    {
        [JsonProperty("Playing Card")]
        public List<string> PlayingCard { get; set; }

        [JsonProperty("Card")]
        public List<string> Card { get; set; }
    }

    public partial class DragonScaleMail
    {
        [JsonProperty("content")]
        public List<DragonScaleMailContent> Content { get; set; }
    }

    public partial class MagentaContent
    {
        [JsonProperty("table")]
        public MagentaTable Table { get; set; }
    }

    public partial class MagentaTable
    {
        [JsonProperty("Dragon")]
        public List<string> Dragon { get; set; }

        [JsonProperty("Resistance")]
        public List<string> Resistance { get; set; }
    }

    public partial class ElementalGem
    {
        [JsonProperty("content")]
        public List<ElementalGemContent> Content { get; set; }
    }

    public partial class FriskyContent
    {
        [JsonProperty("table")]
        public FriskyTable Table { get; set; }
    }

    public partial class FriskyTable
    {
        [JsonProperty("Gem")]
        public List<string> Gem { get; set; }

        [JsonProperty("Summoned Elemental")]
        public List<string> SummonedElemental { get; set; }
    }

    public partial class FeatherToken
    {
        [JsonProperty("content")]
        public List<FeatherTokenContent> Content { get; set; }
    }

    public partial class MischievousContent
    {
        [JsonProperty("table")]
        public MischievousTable Table { get; set; }
    }

    public partial class MischievousTable
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Feather Token")]
        public List<string> FeatherToken { get; set; }
    }

    public partial class FigurineOfWondrousPower
    {
        [JsonProperty("content")]
        public List<string> Content { get; set; }

        [JsonProperty("Giant Fly")]
        public GiantFly GiantFly { get; set; }
    }

    public partial class GiantFly
    {
        [JsonProperty("content")]
        public List<GiantFlyContent> Content { get; set; }
    }

    public partial class HornOfValhalla
    {
        [JsonProperty("content")]
        public List<HornOfValhallaContent> Content { get; set; }
    }

    public partial class BraggadociousContent
    {
        [JsonProperty("table")]
        public BraggadociousTable Table { get; set; }
    }

    public partial class BraggadociousTable
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Horn Type")]
        public List<string> HornType { get; set; }

        [JsonProperty("Berserkers Summoned")]
        public List<string> BerserkersSummoned { get; set; }

        [JsonProperty("Requirement")]
        public List<string> Requirement { get; set; }
    }

    public partial class IronFlask
    {
        [JsonProperty("content")]
        public List<IronFlaskContent> Content { get; set; }
    }

    public partial class Content1
    {
        [JsonProperty("table")]
        public Table1 Table { get; set; }
    }

    public partial class Table1
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Contents")]
        public List<string> Contents { get; set; }
    }

    public partial class ManualOfGolems
    {
        [JsonProperty("content")]
        public List<ManualOfGolemsContent> Content { get; set; }
    }

    public partial class Content2
    {
        [JsonProperty("table")]
        public Table2 Table { get; set; }
    }

    public partial class Table2
    {
        [JsonProperty("d20")]
        public List<string> D20 { get; set; }

        [JsonProperty("Golem")]
        public List<string> Golem { get; set; }

        [JsonProperty("Time")]
        public List<string> Time { get; set; }

        [JsonProperty("Cost")]
        public List<string> Cost { get; set; }
    }

    public partial class NecklaceOfPrayerBeads
    {
        [JsonProperty("content")]
        public List<NecklaceOfPrayerBeadsContent> Content { get; set; }
    }

    public partial class Content3
    {
        [JsonProperty("table")]
        public Table3 Table { get; set; }
    }

    public partial class Table3
    {
        [JsonProperty("d20")]
        public List<string> D20 { get; set; }

        [JsonProperty("Bead of...")]
        public List<string> BeadOf { get; set; }

        [JsonProperty("Spell")]
        public List<string> Spell { get; set; }
    }

    public partial class PotionOfGiantStrength
    {
        [JsonProperty("content")]
        public List<PotionOfGiantStrengthContent> Content { get; set; }
    }

    public partial class Content4
    {
        [JsonProperty("table")]
        public Table4 Table { get; set; }
    }

    public partial class Table4
    {
        [JsonProperty("Type of Giant")]
        public List<string> TypeOfGiant { get; set; }

        [JsonProperty("Strength")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Strength { get; set; }

        [JsonProperty("Rarity")]
        public List<string> Rarity { get; set; }
    }

    public partial class PotionOfHealing
    {
        [JsonProperty("content")]
        public List<string> Content { get; set; }

        [JsonProperty("Potions of Healing")]
        public PotionsOfHealing PotionsOfHealing { get; set; }
    }

    public partial class PotionsOfHealing
    {
        [JsonProperty("table")]
        public PotionsOfHealingTable Table { get; set; }
    }

    public partial class PotionsOfHealingTable
    {
        [JsonProperty("Potion of ...")]
        public List<string> PotionOf { get; set; }

        [JsonProperty("Rarity")]
        public List<string> Rarity { get; set; }

        [JsonProperty("HP Regained")]
        public List<string> HpRegained { get; set; }
    }

    public partial class RingOfResistance
    {
        [JsonProperty("content")]
        public List<RingOfResistanceContent> Content { get; set; }
    }

    public partial class Content5
    {
        [JsonProperty("table")]
        public Table5 Table { get; set; }
    }

    public partial class Table5
    {
        [JsonProperty("d10")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> D10 { get; set; }

        [JsonProperty("Damage Type")]
        public List<string> DamageType { get; set; }

        [JsonProperty("Gem")]
        public List<string> Gem { get; set; }
    }

    public partial class RingOfShootingStars
    {
        [JsonProperty("content")]
        public List<RingOfShootingStarsContent> Content { get; set; }
    }

    public partial class Content6
    {
        [JsonProperty("table")]
        public Table6 Table { get; set; }
    }

    public partial class Table6
    {
        [JsonProperty("Spheres")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Spheres { get; set; }

        [JsonProperty("Lightning Damage")]
        public List<string> LightningDamage { get; set; }
    }

    public partial class RobeOfUsefulItems
    {
        [JsonProperty("content")]
        public List<RobeOfUsefulItemsContent> Content { get; set; }
    }

    public partial class Content7
    {
        [JsonProperty("table")]
        public Table7 Table { get; set; }
    }

    public partial class Table7
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Patch")]
        public List<string> Patch { get; set; }
    }

    public partial class SentientMagicItems
    {
        [JsonProperty("content")]
        public List<string> Content { get; set; }

        [JsonProperty("Creating Sentient Magic Items")]
        public CreatingSentientMagicItems CreatingSentientMagicItems { get; set; }

        [JsonProperty("Conflict")]
        public BeltOfDwarvenkind Conflict { get; set; }
    }

    public partial class CreatingSentientMagicItems
    {
        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("Abilities")]
        public string Abilities { get; set; }

        [JsonProperty("Communication")]
        public Communication Communication { get; set; }

        [JsonProperty("Senses")]
        public Senses Senses { get; set; }

        [JsonProperty("Alignment")]
        public Alignment Alignment { get; set; }

        [JsonProperty("Special Purpose")]
        public SpecialPurpose SpecialPurpose { get; set; }
    }

    public partial class Alignment
    {
        [JsonProperty("content")]
        public List<AlignmentContent> Content { get; set; }
    }

    public partial class Content8
    {
        [JsonProperty("table")]
        public Table8 Table { get; set; }
    }

    public partial class Table8
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Alignment")]
        public List<string> Alignment { get; set; }
    }

    public partial class Communication
    {
        [JsonProperty("content")]
        public List<CommunicationContent> Content { get; set; }
    }

    public partial class Content9
    {
        [JsonProperty("table")]
        public Table9 Table { get; set; }
    }

    public partial class Table9
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Communication")]
        public List<string> Communication { get; set; }
    }

    public partial class Senses
    {
        [JsonProperty("content")]
        public List<SensesContent> Content { get; set; }
    }

    public partial class Content10
    {
        [JsonProperty("table")]
        public Table10 Table { get; set; }
    }

    public partial class Table10
    {
        [JsonProperty("d4")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> D4 { get; set; }

        [JsonProperty("Senses")]
        public List<string> Senses { get; set; }
    }

    public partial class SpecialPurpose
    {
        [JsonProperty("content")]
        public List<SpecialPurposeContent> Content { get; set; }
    }

    public partial class Content11
    {
        [JsonProperty("table")]
        public Table11 Table { get; set; }
    }

    public partial class Table11
    {
        [JsonProperty("d10")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> D10 { get; set; }

        [JsonProperty("Purpose")]
        public List<string> Purpose { get; set; }
    }

    public partial class MagicItemsSpellScroll
    {
        [JsonProperty("content")]
        public List<string> Content { get; set; }

        [JsonProperty("Spell Scroll")]
        public SpellScrollSpellScroll SpellScroll { get; set; }
    }

    public partial class SpellScrollSpellScroll
    {
        [JsonProperty("content")]
        public List<SpellScrollContent> Content { get; set; }
    }

    public partial class Content12
    {
        [JsonProperty("table")]
        public Table12 Table { get; set; }
    }

    public partial class Table12
    {
        [JsonProperty("Spell Level")]
        public List<string> SpellLevel { get; set; }

        [JsonProperty("Rarity")]
        public List<string> Rarity { get; set; }

        [JsonProperty("Save DC")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> SaveDc { get; set; }

        [JsonProperty("Attack Bonus")]
        public List<string> AttackBonus { get; set; }
    }

    public partial class SphereOfAnnihilation
    {
        [JsonProperty("content")]
        public List<SphereOfAnnihilationContent> Content { get; set; }
    }

    public partial class Content13
    {
        [JsonProperty("table")]
        public Table13 Table { get; set; }
    }

    public partial class Table13
    {
        [JsonProperty("d100")]
        public List<string> D100 { get; set; }

        [JsonProperty("Result")]
        public List<string> Result { get; set; }
    }

    public partial class StaffOf
    {
        [JsonProperty("content")]
        public List<StaffOfPowerContent> Content { get; set; }
    }

    public partial class Content14
    {
        [JsonProperty("table")]
        public Table14 Table { get; set; }
    }

    public partial class Table14
    {
        [JsonProperty("Distance from Origin")]
        public List<string> DistanceFromOrigin { get; set; }

        [JsonProperty("Damage")]
        public List<string> Damage { get; set; }
    }

    public partial struct ArmorOfResistanceContent
    {
        public PurpleContent PurpleContent;
        public string String;

        public static implicit operator ArmorOfResistanceContent(PurpleContent PurpleContent) => new ArmorOfResistanceContent { PurpleContent = PurpleContent };
        public static implicit operator ArmorOfResistanceContent(string String) => new ArmorOfResistanceContent { String = String };
    }

    public partial struct Content15
    {
        public string String;
        public List<string> StringArray;

        public static implicit operator Content15(string String) => new Content15 { String = String };
        public static implicit operator Content15(List<string> StringArray) => new Content15 { StringArray = StringArray };
    }

    public partial struct BagOfBeansContent
    {
        public FluffyContent FluffyContent;
        public string String;

        public static implicit operator BagOfBeansContent(FluffyContent FluffyContent) => new BagOfBeansContent { FluffyContent = FluffyContent };
        public static implicit operator BagOfBeansContent(string String) => new BagOfBeansContent { String = String };
    }

    public partial struct BeltOfGiantStrengthContent
    {
        public string String;
        public TentacledContent TentacledContent;

        public static implicit operator BeltOfGiantStrengthContent(string String) => new BeltOfGiantStrengthContent { String = String };
        public static implicit operator BeltOfGiantStrengthContent(TentacledContent TentacledContent) => new BeltOfGiantStrengthContent { TentacledContent = TentacledContent };
    }

    public partial struct CandleOfInvocationContent
    {
        public StickyContent StickyContent;
        public string String;

        public static implicit operator CandleOfInvocationContent(StickyContent StickyContent) => new CandleOfInvocationContent { StickyContent = StickyContent };
        public static implicit operator CandleOfInvocationContent(string String) => new CandleOfInvocationContent { String = String };
    }

    public partial struct CarpetOfFlyingContent
    {
        public IndigoContent IndigoContent;
        public string String;

        public static implicit operator CarpetOfFlyingContent(IndigoContent IndigoContent) => new CarpetOfFlyingContent { IndigoContent = IndigoContent };
        public static implicit operator CarpetOfFlyingContent(string String) => new CarpetOfFlyingContent { String = String };
    }

    public partial struct CubeOfForceFacesContent
    {
        public IndecentContent IndecentContent;
        public string String;

        public static implicit operator CubeOfForceFacesContent(IndecentContent IndecentContent) => new CubeOfForceFacesContent { IndecentContent = IndecentContent };
        public static implicit operator CubeOfForceFacesContent(string String) => new CubeOfForceFacesContent { String = String };
    }

    public partial struct DeckOfIllusionsContent
    {
        public HilariousContent HilariousContent;
        public string String;

        public static implicit operator DeckOfIllusionsContent(HilariousContent HilariousContent) => new DeckOfIllusionsContent { HilariousContent = HilariousContent };
        public static implicit operator DeckOfIllusionsContent(string String) => new DeckOfIllusionsContent { String = String };
    }

    public partial struct AvatarOfDeathContent
    {
        public AmbitiousContent AmbitiousContent;
        public string String;

        public static implicit operator AvatarOfDeathContent(AmbitiousContent AmbitiousContent) => new AvatarOfDeathContent { AmbitiousContent = AmbitiousContent };
        public static implicit operator AvatarOfDeathContent(string String) => new AvatarOfDeathContent { String = String };
    }

    public partial struct DeckOfManyThingsContent
    {
        public CunningContent CunningContent;
        public string String;

        public static implicit operator DeckOfManyThingsContent(CunningContent CunningContent) => new DeckOfManyThingsContent { CunningContent = CunningContent };
        public static implicit operator DeckOfManyThingsContent(string String) => new DeckOfManyThingsContent { String = String };
    }

    public partial struct DragonScaleMailContent
    {
        public MagentaContent MagentaContent;
        public string String;

        public static implicit operator DragonScaleMailContent(MagentaContent MagentaContent) => new DragonScaleMailContent { MagentaContent = MagentaContent };
        public static implicit operator DragonScaleMailContent(string String) => new DragonScaleMailContent { String = String };
    }

    public partial struct ElementalGemContent
    {
        public FriskyContent FriskyContent;
        public string String;

        public static implicit operator ElementalGemContent(FriskyContent FriskyContent) => new ElementalGemContent { FriskyContent = FriskyContent };
        public static implicit operator ElementalGemContent(string String) => new ElementalGemContent { String = String };
    }

    public partial struct FeatherTokenContent
    {
        public MischievousContent MischievousContent;
        public string String;

        public static implicit operator FeatherTokenContent(MischievousContent MischievousContent) => new FeatherTokenContent { MischievousContent = MischievousContent };
        public static implicit operator FeatherTokenContent(string String) => new FeatherTokenContent { String = String };
    }

    public partial struct GiantFlyContent
    {
        public AmbitiousContent AmbitiousContent;
        public string String;
        public List<string> StringArray;

        public static implicit operator GiantFlyContent(AmbitiousContent AmbitiousContent) => new GiantFlyContent { AmbitiousContent = AmbitiousContent };
        public static implicit operator GiantFlyContent(string String) => new GiantFlyContent { String = String };
        public static implicit operator GiantFlyContent(List<string> StringArray) => new GiantFlyContent { StringArray = StringArray };
    }

    public partial struct HornOfValhallaContent
    {
        public BraggadociousContent BraggadociousContent;
        public string String;

        public static implicit operator HornOfValhallaContent(BraggadociousContent BraggadociousContent) => new HornOfValhallaContent { BraggadociousContent = BraggadociousContent };
        public static implicit operator HornOfValhallaContent(string String) => new HornOfValhallaContent { String = String };
    }

    public partial struct IronFlaskContent
    {
        public Content1 Content1;
        public string String;

        public static implicit operator IronFlaskContent(Content1 Content1) => new IronFlaskContent { Content1 = Content1 };
        public static implicit operator IronFlaskContent(string String) => new IronFlaskContent { String = String };
    }

    public partial struct ManualOfGolemsContent
    {
        public Content2 Content2;
        public string String;

        public static implicit operator ManualOfGolemsContent(Content2 Content2) => new ManualOfGolemsContent { Content2 = Content2 };
        public static implicit operator ManualOfGolemsContent(string String) => new ManualOfGolemsContent { String = String };
    }

    public partial struct NecklaceOfPrayerBeadsContent
    {
        public Content3 Content3;
        public string String;

        public static implicit operator NecklaceOfPrayerBeadsContent(Content3 Content3) => new NecklaceOfPrayerBeadsContent { Content3 = Content3 };
        public static implicit operator NecklaceOfPrayerBeadsContent(string String) => new NecklaceOfPrayerBeadsContent { String = String };
    }

    public partial struct PotionOfGiantStrengthContent
    {
        public Content4 Content4;
        public string String;

        public static implicit operator PotionOfGiantStrengthContent(Content4 Content4) => new PotionOfGiantStrengthContent { Content4 = Content4 };
        public static implicit operator PotionOfGiantStrengthContent(string String) => new PotionOfGiantStrengthContent { String = String };
    }

    public partial struct RingOfResistanceContent
    {
        public Content5 Content5;
        public string String;

        public static implicit operator RingOfResistanceContent(Content5 Content5) => new RingOfResistanceContent { Content5 = Content5 };
        public static implicit operator RingOfResistanceContent(string String) => new RingOfResistanceContent { String = String };
    }

    public partial struct RingOfShootingStarsContent
    {
        public Content6 Content6;
        public string String;

        public static implicit operator RingOfShootingStarsContent(Content6 Content6) => new RingOfShootingStarsContent { Content6 = Content6 };
        public static implicit operator RingOfShootingStarsContent(string String) => new RingOfShootingStarsContent { String = String };
    }

    public partial struct RobeOfUsefulItemsContent
    {
        public Content7 Content7;
        public string String;
        public List<string> StringArray;

        public static implicit operator RobeOfUsefulItemsContent(Content7 Content7) => new RobeOfUsefulItemsContent { Content7 = Content7 };
        public static implicit operator RobeOfUsefulItemsContent(string String) => new RobeOfUsefulItemsContent { String = String };
        public static implicit operator RobeOfUsefulItemsContent(List<string> StringArray) => new RobeOfUsefulItemsContent { StringArray = StringArray };
    }

    public partial struct AlignmentContent
    {
        public Content8 Content8;
        public string String;

        public static implicit operator AlignmentContent(Content8 Content8) => new AlignmentContent { Content8 = Content8 };
        public static implicit operator AlignmentContent(string String) => new AlignmentContent { String = String };
    }

    public partial struct CommunicationContent
    {
        public Content9 Content9;
        public string String;

        public static implicit operator CommunicationContent(Content9 Content9) => new CommunicationContent { Content9 = Content9 };
        public static implicit operator CommunicationContent(string String) => new CommunicationContent { String = String };
    }

    public partial struct SensesContent
    {
        public Content10 Content10;
        public string String;

        public static implicit operator SensesContent(Content10 Content10) => new SensesContent { Content10 = Content10 };
        public static implicit operator SensesContent(string String) => new SensesContent { String = String };
    }

    public partial struct SpecialPurposeContent
    {
        public Content11 Content11;
        public string String;

        public static implicit operator SpecialPurposeContent(Content11 Content11) => new SpecialPurposeContent { Content11 = Content11 };
        public static implicit operator SpecialPurposeContent(string String) => new SpecialPurposeContent { String = String };
    }

    public partial struct SpellScrollContent
    {
        public Content12 Content12;
        public string String;

        public static implicit operator SpellScrollContent(Content12 Content12) => new SpellScrollContent { Content12 = Content12 };
        public static implicit operator SpellScrollContent(string String) => new SpellScrollContent { String = String };
    }

    public partial struct SphereOfAnnihilationContent
    {
        public Content13 Content13;
        public string String;

        public static implicit operator SphereOfAnnihilationContent(Content13 Content13) => new SphereOfAnnihilationContent { Content13 = Content13 };
        public static implicit operator SphereOfAnnihilationContent(string String) => new SphereOfAnnihilationContent { String = String };
    }

    public partial struct StaffOfPowerContent
    {
        public Content14 Content14;
        public string String;

        public static implicit operator StaffOfPowerContent(Content14 Content14) => new StaffOfPowerContent { Content14 = Content14 };
        public static implicit operator StaffOfPowerContent(string String) => new StaffOfPowerContent { String = String };
    }

    public partial class MagicItems
    {
        public static MagicItems FromJson(string json) => JsonConvert.DeserializeObject<MagicItems>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MagicItems self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ArmorOfResistanceContentConverter.Singleton,
                Content15Converter.Singleton,
                BagOfBeansContentConverter.Singleton,
                BeltOfGiantStrengthContentConverter.Singleton,
                CandleOfInvocationContentConverter.Singleton,
                CarpetOfFlyingContentConverter.Singleton,
                CubeOfForceFacesContentConverter.Singleton,
                DeckOfIllusionsContentConverter.Singleton,
                AvatarOfDeathContentConverter.Singleton,
                DeckOfManyThingsContentConverter.Singleton,
                DragonScaleMailContentConverter.Singleton,
                ElementalGemContentConverter.Singleton,
                FeatherTokenContentConverter.Singleton,
                GiantFlyContentConverter.Singleton,
                HornOfValhallaContentConverter.Singleton,
                IronFlaskContentConverter.Singleton,
                ManualOfGolemsContentConverter.Singleton,
                NecklaceOfPrayerBeadsContentConverter.Singleton,
                PotionOfGiantStrengthContentConverter.Singleton,
                RingOfResistanceContentConverter.Singleton,
                RingOfShootingStarsContentConverter.Singleton,
                RobeOfUsefulItemsContentConverter.Singleton,
                AlignmentContentConverter.Singleton,
                CommunicationContentConverter.Singleton,
                SensesContentConverter.Singleton,
                SpecialPurposeContentConverter.Singleton,
                SpellScrollContentConverter.Singleton,
                SphereOfAnnihilationContentConverter.Singleton,
                StaffOfPowerContentConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(List<long>);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (List<long>)untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class ArmorOfResistanceContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ArmorOfResistanceContent) || t == typeof(ArmorOfResistanceContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ArmorOfResistanceContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleContent>(reader);
                    return new ArmorOfResistanceContent { PurpleContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type ArmorOfResistanceContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ArmorOfResistanceContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.PurpleContent != null)
            {
                serializer.Serialize(writer, value.PurpleContent);
                return;
            }
            throw new Exception("Cannot marshal type ArmorOfResistanceContent");
        }

        public static readonly ArmorOfResistanceContentConverter Singleton = new ArmorOfResistanceContentConverter();
    }

    internal class Content15Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Content15) || t == typeof(Content15?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Content15 { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new Content15 { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Content15");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Content15)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type Content15");
        }

        public static readonly Content15Converter Singleton = new Content15Converter();
    }

    internal class BagOfBeansContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BagOfBeansContent) || t == typeof(BagOfBeansContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new BagOfBeansContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FluffyContent>(reader);
                    return new BagOfBeansContent { FluffyContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type BagOfBeansContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (BagOfBeansContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.FluffyContent != null)
            {
                serializer.Serialize(writer, value.FluffyContent);
                return;
            }
            throw new Exception("Cannot marshal type BagOfBeansContent");
        }

        public static readonly BagOfBeansContentConverter Singleton = new BagOfBeansContentConverter();
    }

    internal class BeltOfGiantStrengthContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BeltOfGiantStrengthContent) || t == typeof(BeltOfGiantStrengthContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new BeltOfGiantStrengthContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<TentacledContent>(reader);
                    return new BeltOfGiantStrengthContent { TentacledContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type BeltOfGiantStrengthContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (BeltOfGiantStrengthContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.TentacledContent != null)
            {
                serializer.Serialize(writer, value.TentacledContent);
                return;
            }
            throw new Exception("Cannot marshal type BeltOfGiantStrengthContent");
        }

        public static readonly BeltOfGiantStrengthContentConverter Singleton = new BeltOfGiantStrengthContentConverter();
    }

    internal class CandleOfInvocationContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CandleOfInvocationContent) || t == typeof(CandleOfInvocationContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new CandleOfInvocationContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<StickyContent>(reader);
                    return new CandleOfInvocationContent { StickyContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type CandleOfInvocationContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CandleOfInvocationContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StickyContent != null)
            {
                serializer.Serialize(writer, value.StickyContent);
                return;
            }
            throw new Exception("Cannot marshal type CandleOfInvocationContent");
        }

        public static readonly CandleOfInvocationContentConverter Singleton = new CandleOfInvocationContentConverter();
    }

    internal class CarpetOfFlyingContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CarpetOfFlyingContent) || t == typeof(CarpetOfFlyingContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new CarpetOfFlyingContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<IndigoContent>(reader);
                    return new CarpetOfFlyingContent { IndigoContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type CarpetOfFlyingContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CarpetOfFlyingContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.IndigoContent != null)
            {
                serializer.Serialize(writer, value.IndigoContent);
                return;
            }
            throw new Exception("Cannot marshal type CarpetOfFlyingContent");
        }

        public static readonly CarpetOfFlyingContentConverter Singleton = new CarpetOfFlyingContentConverter();
    }

    internal class CubeOfForceFacesContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CubeOfForceFacesContent) || t == typeof(CubeOfForceFacesContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new CubeOfForceFacesContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<IndecentContent>(reader);
                    return new CubeOfForceFacesContent { IndecentContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type CubeOfForceFacesContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CubeOfForceFacesContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.IndecentContent != null)
            {
                serializer.Serialize(writer, value.IndecentContent);
                return;
            }
            throw new Exception("Cannot marshal type CubeOfForceFacesContent");
        }

        public static readonly CubeOfForceFacesContentConverter Singleton = new CubeOfForceFacesContentConverter();
    }

    internal class DeckOfIllusionsContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DeckOfIllusionsContent) || t == typeof(DeckOfIllusionsContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new DeckOfIllusionsContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<HilariousContent>(reader);
                    return new DeckOfIllusionsContent { HilariousContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type DeckOfIllusionsContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (DeckOfIllusionsContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.HilariousContent != null)
            {
                serializer.Serialize(writer, value.HilariousContent);
                return;
            }
            throw new Exception("Cannot marshal type DeckOfIllusionsContent");
        }

        public static readonly DeckOfIllusionsContentConverter Singleton = new DeckOfIllusionsContentConverter();
    }

    internal class AvatarOfDeathContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvatarOfDeathContent) || t == typeof(AvatarOfDeathContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new AvatarOfDeathContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AmbitiousContent>(reader);
                    return new AvatarOfDeathContent { AmbitiousContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type AvatarOfDeathContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AvatarOfDeathContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AmbitiousContent != null)
            {
                serializer.Serialize(writer, value.AmbitiousContent);
                return;
            }
            throw new Exception("Cannot marshal type AvatarOfDeathContent");
        }

        public static readonly AvatarOfDeathContentConverter Singleton = new AvatarOfDeathContentConverter();
    }

    internal class DeckOfManyThingsContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DeckOfManyThingsContent) || t == typeof(DeckOfManyThingsContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new DeckOfManyThingsContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<CunningContent>(reader);
                    return new DeckOfManyThingsContent { CunningContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type DeckOfManyThingsContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (DeckOfManyThingsContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.CunningContent != null)
            {
                serializer.Serialize(writer, value.CunningContent);
                return;
            }
            throw new Exception("Cannot marshal type DeckOfManyThingsContent");
        }

        public static readonly DeckOfManyThingsContentConverter Singleton = new DeckOfManyThingsContentConverter();
    }

    internal class DragonScaleMailContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DragonScaleMailContent) || t == typeof(DragonScaleMailContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new DragonScaleMailContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<MagentaContent>(reader);
                    return new DragonScaleMailContent { MagentaContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type DragonScaleMailContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (DragonScaleMailContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.MagentaContent != null)
            {
                serializer.Serialize(writer, value.MagentaContent);
                return;
            }
            throw new Exception("Cannot marshal type DragonScaleMailContent");
        }

        public static readonly DragonScaleMailContentConverter Singleton = new DragonScaleMailContentConverter();
    }

    internal class ElementalGemContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ElementalGemContent) || t == typeof(ElementalGemContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ElementalGemContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FriskyContent>(reader);
                    return new ElementalGemContent { FriskyContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type ElementalGemContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ElementalGemContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.FriskyContent != null)
            {
                serializer.Serialize(writer, value.FriskyContent);
                return;
            }
            throw new Exception("Cannot marshal type ElementalGemContent");
        }

        public static readonly ElementalGemContentConverter Singleton = new ElementalGemContentConverter();
    }

    internal class FeatherTokenContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FeatherTokenContent) || t == typeof(FeatherTokenContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new FeatherTokenContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<MischievousContent>(reader);
                    return new FeatherTokenContent { MischievousContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type FeatherTokenContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FeatherTokenContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.MischievousContent != null)
            {
                serializer.Serialize(writer, value.MischievousContent);
                return;
            }
            throw new Exception("Cannot marshal type FeatherTokenContent");
        }

        public static readonly FeatherTokenContentConverter Singleton = new FeatherTokenContentConverter();
    }

    internal class GiantFlyContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GiantFlyContent) || t == typeof(GiantFlyContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new GiantFlyContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AmbitiousContent>(reader);
                    return new GiantFlyContent { AmbitiousContent = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new GiantFlyContent { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type GiantFlyContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (GiantFlyContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            if (value.AmbitiousContent != null)
            {
                serializer.Serialize(writer, value.AmbitiousContent);
                return;
            }
            throw new Exception("Cannot marshal type GiantFlyContent");
        }

        public static readonly GiantFlyContentConverter Singleton = new GiantFlyContentConverter();
    }

    internal class HornOfValhallaContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HornOfValhallaContent) || t == typeof(HornOfValhallaContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new HornOfValhallaContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<BraggadociousContent>(reader);
                    return new HornOfValhallaContent { BraggadociousContent = objectValue };
            }
            throw new Exception("Cannot unmarshal type HornOfValhallaContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (HornOfValhallaContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.BraggadociousContent != null)
            {
                serializer.Serialize(writer, value.BraggadociousContent);
                return;
            }
            throw new Exception("Cannot marshal type HornOfValhallaContent");
        }

        public static readonly HornOfValhallaContentConverter Singleton = new HornOfValhallaContentConverter();
    }

    internal class IronFlaskContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IronFlaskContent) || t == typeof(IronFlaskContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new IronFlaskContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content1>(reader);
                    return new IronFlaskContent { Content1 = objectValue };
            }
            throw new Exception("Cannot unmarshal type IronFlaskContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (IronFlaskContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content1 != null)
            {
                serializer.Serialize(writer, value.Content1);
                return;
            }
            throw new Exception("Cannot marshal type IronFlaskContent");
        }

        public static readonly IronFlaskContentConverter Singleton = new IronFlaskContentConverter();
    }

    internal class ManualOfGolemsContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ManualOfGolemsContent) || t == typeof(ManualOfGolemsContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ManualOfGolemsContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content2>(reader);
                    return new ManualOfGolemsContent { Content2 = objectValue };
            }
            throw new Exception("Cannot unmarshal type ManualOfGolemsContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ManualOfGolemsContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content2 != null)
            {
                serializer.Serialize(writer, value.Content2);
                return;
            }
            throw new Exception("Cannot marshal type ManualOfGolemsContent");
        }

        public static readonly ManualOfGolemsContentConverter Singleton = new ManualOfGolemsContentConverter();
    }

    internal class NecklaceOfPrayerBeadsContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NecklaceOfPrayerBeadsContent) || t == typeof(NecklaceOfPrayerBeadsContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new NecklaceOfPrayerBeadsContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content3>(reader);
                    return new NecklaceOfPrayerBeadsContent { Content3 = objectValue };
            }
            throw new Exception("Cannot unmarshal type NecklaceOfPrayerBeadsContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (NecklaceOfPrayerBeadsContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content3 != null)
            {
                serializer.Serialize(writer, value.Content3);
                return;
            }
            throw new Exception("Cannot marshal type NecklaceOfPrayerBeadsContent");
        }

        public static readonly NecklaceOfPrayerBeadsContentConverter Singleton = new NecklaceOfPrayerBeadsContentConverter();
    }

    internal class PotionOfGiantStrengthContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PotionOfGiantStrengthContent) || t == typeof(PotionOfGiantStrengthContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new PotionOfGiantStrengthContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content4>(reader);
                    return new PotionOfGiantStrengthContent { Content4 = objectValue };
            }
            throw new Exception("Cannot unmarshal type PotionOfGiantStrengthContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (PotionOfGiantStrengthContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content4 != null)
            {
                serializer.Serialize(writer, value.Content4);
                return;
            }
            throw new Exception("Cannot marshal type PotionOfGiantStrengthContent");
        }

        public static readonly PotionOfGiantStrengthContentConverter Singleton = new PotionOfGiantStrengthContentConverter();
    }

    internal class RingOfResistanceContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RingOfResistanceContent) || t == typeof(RingOfResistanceContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new RingOfResistanceContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content5>(reader);
                    return new RingOfResistanceContent { Content5 = objectValue };
            }
            throw new Exception("Cannot unmarshal type RingOfResistanceContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (RingOfResistanceContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content5 != null)
            {
                serializer.Serialize(writer, value.Content5);
                return;
            }
            throw new Exception("Cannot marshal type RingOfResistanceContent");
        }

        public static readonly RingOfResistanceContentConverter Singleton = new RingOfResistanceContentConverter();
    }

    internal class RingOfShootingStarsContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RingOfShootingStarsContent) || t == typeof(RingOfShootingStarsContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new RingOfShootingStarsContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content6>(reader);
                    return new RingOfShootingStarsContent { Content6 = objectValue };
            }
            throw new Exception("Cannot unmarshal type RingOfShootingStarsContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (RingOfShootingStarsContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content6 != null)
            {
                serializer.Serialize(writer, value.Content6);
                return;
            }
            throw new Exception("Cannot marshal type RingOfShootingStarsContent");
        }

        public static readonly RingOfShootingStarsContentConverter Singleton = new RingOfShootingStarsContentConverter();
    }

    internal class RobeOfUsefulItemsContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RobeOfUsefulItemsContent) || t == typeof(RobeOfUsefulItemsContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new RobeOfUsefulItemsContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content7>(reader);
                    return new RobeOfUsefulItemsContent { Content7 = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new RobeOfUsefulItemsContent { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type RobeOfUsefulItemsContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (RobeOfUsefulItemsContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            if (value.Content7 != null)
            {
                serializer.Serialize(writer, value.Content7);
                return;
            }
            throw new Exception("Cannot marshal type RobeOfUsefulItemsContent");
        }

        public static readonly RobeOfUsefulItemsContentConverter Singleton = new RobeOfUsefulItemsContentConverter();
    }

    internal class AlignmentContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AlignmentContent) || t == typeof(AlignmentContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new AlignmentContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content8>(reader);
                    return new AlignmentContent { Content8 = objectValue };
            }
            throw new Exception("Cannot unmarshal type AlignmentContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AlignmentContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content8 != null)
            {
                serializer.Serialize(writer, value.Content8);
                return;
            }
            throw new Exception("Cannot marshal type AlignmentContent");
        }

        public static readonly AlignmentContentConverter Singleton = new AlignmentContentConverter();
    }

    internal class CommunicationContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CommunicationContent) || t == typeof(CommunicationContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new CommunicationContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content9>(reader);
                    return new CommunicationContent { Content9 = objectValue };
            }
            throw new Exception("Cannot unmarshal type CommunicationContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CommunicationContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content9 != null)
            {
                serializer.Serialize(writer, value.Content9);
                return;
            }
            throw new Exception("Cannot marshal type CommunicationContent");
        }

        public static readonly CommunicationContentConverter Singleton = new CommunicationContentConverter();
    }

    internal class SensesContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SensesContent) || t == typeof(SensesContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new SensesContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content10>(reader);
                    return new SensesContent { Content10 = objectValue };
            }
            throw new Exception("Cannot unmarshal type SensesContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SensesContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content10 != null)
            {
                serializer.Serialize(writer, value.Content10);
                return;
            }
            throw new Exception("Cannot marshal type SensesContent");
        }

        public static readonly SensesContentConverter Singleton = new SensesContentConverter();
    }

    internal class SpecialPurposeContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SpecialPurposeContent) || t == typeof(SpecialPurposeContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new SpecialPurposeContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content11>(reader);
                    return new SpecialPurposeContent { Content11 = objectValue };
            }
            throw new Exception("Cannot unmarshal type SpecialPurposeContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SpecialPurposeContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content11 != null)
            {
                serializer.Serialize(writer, value.Content11);
                return;
            }
            throw new Exception("Cannot marshal type SpecialPurposeContent");
        }

        public static readonly SpecialPurposeContentConverter Singleton = new SpecialPurposeContentConverter();
    }

    internal class SpellScrollContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SpellScrollContent) || t == typeof(SpellScrollContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new SpellScrollContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content12>(reader);
                    return new SpellScrollContent { Content12 = objectValue };
            }
            throw new Exception("Cannot unmarshal type SpellScrollContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SpellScrollContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content12 != null)
            {
                serializer.Serialize(writer, value.Content12);
                return;
            }
            throw new Exception("Cannot marshal type SpellScrollContent");
        }

        public static readonly SpellScrollContentConverter Singleton = new SpellScrollContentConverter();
    }

    internal class SphereOfAnnihilationContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SphereOfAnnihilationContent) || t == typeof(SphereOfAnnihilationContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new SphereOfAnnihilationContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content13>(reader);
                    return new SphereOfAnnihilationContent { Content13 = objectValue };
            }
            throw new Exception("Cannot unmarshal type SphereOfAnnihilationContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SphereOfAnnihilationContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content13 != null)
            {
                serializer.Serialize(writer, value.Content13);
                return;
            }
            throw new Exception("Cannot marshal type SphereOfAnnihilationContent");
        }

        public static readonly SphereOfAnnihilationContentConverter Singleton = new SphereOfAnnihilationContentConverter();
    }

    internal class StaffOfPowerContentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StaffOfPowerContent) || t == typeof(StaffOfPowerContent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new StaffOfPowerContent { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Content14>(reader);
                    return new StaffOfPowerContent { Content14 = objectValue };
            }
            throw new Exception("Cannot unmarshal type StaffOfPowerContent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (StaffOfPowerContent)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.Content14 != null)
            {
                serializer.Serialize(writer, value.Content14);
                return;
            }
            throw new Exception("Cannot marshal type StaffOfPowerContent");
        }

        public static readonly StaffOfPowerContentConverter Singleton = new StaffOfPowerContentConverter();
    }
}
